{"version":3,"sources":["../node_modules/node-fetch/browser.js"],"names":["global","self","window","Error","getGlobal","module","exports","fetch","default","bind","Headers","Request","Response"],"mappings":"yFAEA,IAmBAA,EAnBA,WAIA,wBAAAC,KACA,OAAAA,KAGA,wBAAAC,OACA,OAAAA,OAGA,wBAAAF,EACA,OAAAA,EAGA,UAAAG,MAAA,kCAGAC,GACAC,EAAAC,UAAAN,EAAAO,MAEAP,EAAAO,QACAD,EAAAE,QAAAR,EAAAO,MAAAE,KAAAT,IAGAM,EAAAI,QAAAV,EAAAU,QACAJ,EAAAK,QAAAX,EAAAW,QACAL,EAAAM,SAAAZ,EAAAY","file":"static/js/3.5caa5dfa.chunk.js","sourcesContent":["\"use strict\"; // ref: https://github.com/tc39/proposal-global\n\nvar getGlobal = function getGlobal() {\n  // the only reliable means to get the global object is\n  // `Function('return this')()`\n  // However, this causes CSP violations in Chrome apps.\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n\n  throw new Error('unable to locate global object');\n};\n\nvar global = getGlobal();\nmodule.exports = exports = global.fetch; // Needed for TypeScript and Webpack.\n\nif (global.fetch) {\n  exports.default = global.fetch.bind(global);\n}\n\nexports.Headers = global.Headers;\nexports.Request = global.Request;\nexports.Response = global.Response;"],"sourceRoot":""}